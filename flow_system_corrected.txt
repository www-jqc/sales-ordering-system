🧭 RESTAURANT ORDERING SYSTEM FLOW (CORRECTED)

📋 SYSTEM OVERVIEW
A complete restaurant management system with QR-based ordering, real-time updates, and multi-role workflows.

🔄 COMPLETE ORDER LIFECYCLE

1. 🏠 CUSTOMER INTERACTION (QR Code Ordering)
   🔸 Steps:
   - Customer scans QR code at table (contains table_id and unique URL)
   - Redirects to React frontend with table context
   - Customer browses menu (GET /api/products)
   - Selects items, quantities, and special requests
   - Submits order (POST /api/orders)
   
   🔸 System Actions:
   - Creates customer record (if new) or retrieves existing
   - Creates order record with status 'PENDING'
   - Creates order_items records
   - Updates table status to 'OCCUPIED'
   - Creates notification for cashier and kitchen
   - Emits 'order_submitted' WebSocket event

2. 💳 CASHIER CONFIRMATION & PAYMENT
   🔸 Steps:
   - Receives real-time notification of new order
   - Reviews order details (items, table, special requests)
   - Selects payment method (CASH, GCASH)
   - Enters amount_paid and calculates change
   - Confirms payment
   
   🔸 System Actions:
   - Updates order status to 'PAID'
   - Creates payment_transaction record
   - Creates sales record
   - Updates processed_by_id to cashier
   - Emits 'order_paid' WebSocket event
   - Notifies kitchen

3. 👨‍🍳 KITCHEN WORKFLOW
   🔸 Steps:
   - Receives notification of paid order
   - Reviews order details and special requests
   - Prepares food items
   - Marks order as 'COMPLETED' when ready
   
   🔸 System Actions:
   - Updates order status to 'COMPLETED'
   - Updates order completion timestamp
   - Creates notification for waiter
   - Emits 'order_ready' WebSocket event

4. 🍽 WAITER WORKFLOW (Order Delivery)
   🔸 Steps:
   - Receives notification: "Order Ready for Table X"
   - Reviews order details and table number
   - Delivers food to correct table
   - Marks order as 'DELIVERED'
   
   🔸 System Actions:
   - Updates order status to 'DELIVERED'
   - Updates order delivery timestamp
   - Creates delivery notification
   - Emits 'order_delivered' WebSocket event

5. 🧹 POST-MEAL PROCESS & TABLE MANAGEMENT
   🔸 Steps:
   - After customer leaves, waiter cleans table
   - Marks table as 'CLEANING' then 'AVAILABLE'
   
   🔸 System Actions:
   - Updates table status to 'AVAILABLE'
   - Emits 'table_status_updated' WebSocket event
   - Updates dashboard in real-time

6. ⭐ CUSTOMER FEEDBACK (Optional)
   🔸 Steps:
   - After delivery, customer can provide feedback
   - Submits rating (1-5) and optional comment
   
   🔸 System Actions:
   - Creates customer_feedback record
   - Links to order and customer
   - Available for admin review

📊 ORDER STATUS LIFECYCLE
Status      | Triggered By | Next Status    | Description
------------|--------------|----------------|-------------
PENDING     | Customer     | PAID           | Order placed, awaiting payment
PAID        | Cashier      | COMPLETED      | Payment confirmed, sent to kitchen
COMPLETED   | Kitchen      | DELIVERED      | Food prepared, ready for delivery
DELIVERED   | Waiter       | COMPLETE       | Order served to customer

🪑 TABLE STATUS LIFECYCLE
Status      | Triggered By | Next Status    | Description
------------|--------------|----------------|-------------
AVAILABLE   | System       | OCCUPIED       | Ready for new customers
OCCUPIED    | Order        | READY          | Customer seated, order placed
READY       | Kitchen      | CLEANING       | Food ready, table needs attention
CLEANING    | Waiter       | AVAILABLE      | Being cleaned after customer leaves

🔔 WEBSOCKET EVENT MAP
Event               | Emitted By | Listeners           | Purpose
--------------------|------------|---------------------|------------------
order_submitted     | Customer   | Cashier, Kitchen    | New order created
order_paid          | Cashier    | Kitchen             | Payment completed
order_ready         | Kitchen    | Waiter              | Food ready for delivery
order_delivered     | Waiter     | Admin, System       | Order served
table_status_updated| Waiter     | Admin, Dashboard    | Table status changed
customer_feedback   | Customer   | Admin               | Feedback submitted

🧑‍💼 ADMIN PANEL WORKFLOWS
- Manage products and categories
- Manage users, employees, and roles
- View all orders and statuses
- Generate sales reports and analytics
- Monitor customer feedback
- Manage table QR codes and statuses
- Handle employee schedules
- View system logs and audit trails

📦 DATABASE OPERATIONS PER FLOW
Action              | Tables Affected
--------------------|------------------
Place Order         | customers, orders, order_items, tables, notifications
Confirm Payment     | orders, payment_transactions, sales, notifications
Mark as Ready       | orders, notifications
Deliver Order       | orders, notifications
Submit Feedback     | customer_feedback
Clean Table         | tables, notifications

🧩 BACKEND CONTROLLERS (Node.js)
Controller          | Purpose
--------------------|------------------
auth.controller     | Login, JWT handling, role-based access
order.controller    | Complete order lifecycle management
product.controller  | Product CRUD and category management
payment.controller  | Payment processing and validation
customer.controller | Customer management and feedback
table.controller    | Table status and QR code management
socket.handler      | WebSocket event handling
admin.controller    | Admin panel operations
notification.controller | Notification management

🔧 TECHNICAL IMPLEMENTATION NOTES
- Use JWT for authentication with role-based permissions
- Implement WebSocket rooms for real-time updates
- Use transactions for payment operations
- Implement proper error handling and logging
- Use environment variables for configuration
- Implement rate limiting for API endpoints
- Use prepared statements for database queries 